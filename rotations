#define _USE_MATH_DEFINES

#include <iostream>
#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <cmath>

using namespace Eigen;

Eigen::Quaterniond euler2Quaternion(double roll,double pitch,double yaw )
{
    Eigen::AngleAxisd rollAngle(roll, Eigen::Vector3d::UnitX());
    Eigen::AngleAxisd pitchAngle(pitch, Eigen::Vector3d::UnitY());
    Eigen::AngleAxisd yawAngle(yaw, Eigen::Vector3d::UnitZ());

    Eigen::Quaterniond q = yawAngle * pitchAngle * rollAngle;
    return q;
}

int main()
{
    MatrixXd rotationA(3,3),rotationB(3,3);
    double rollA=0,rollB=-M_PI/3,pitchA=M_PI/4,pitchB=0,yawA=M_PI/3,yawB=0;
    
    Eigen::Quaterniond qA = euler2Quaternion(rollA,pitchA,yawA);
    Eigen::Quaterniond qB = euler2Quaternion(rollB,pitchB,yawB);
    rotationA = qA.toRotationMatrix();
    rotationB = qB.toRotationMatrix();
    std::cout << rotationA << std::endl<<std::endl<<rotationB<<std::endl;
    std::cout<<"Quarternion A:"<<qA.w()<<" "<<qA.x()<<" "<<qA.y()<<" "<<qA.z()<<std::endl;
    std::cout<<"Quarternion B:"<<qB.w()<<" "<<qB.x()<<" "<<qB.y()<<" "<<qB.z()<<std::endl;
    Quaterniond qC = qA*qB;
    Quaterniond qD = qB*qA;
    std::cout<<"Quarternion C:"<<qC.w()<<" "<<qC.x()<<" "<<qC.y()<<" "<<qC.z()<<std::endl;
    std::cout<<"Quarternion D:"<<qD.w()<<" "<<qD.x()<<" "<<qD.y()<<" "<<qD.z()<<std::endl;
    Quaterniond qE = qA * qB.inverse();
    Quaterniond qF = qE*qB;
    std::cout<<"Quarternion F:"<<qF.w()<<" "<<qF.x()<<" "<<qF.y()<<" "<<qF.z()<<std::endl;
}
